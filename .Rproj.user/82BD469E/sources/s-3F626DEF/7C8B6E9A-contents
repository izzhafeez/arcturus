################################
# Create edx set, validation set
################################

# Note: this process could take a couple of minutes

if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")

# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip

dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)

ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
                 col.names = c("userId", "movieId", "rating", "timestamp"))

movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
                                           title = as.character(title),
                                           genres = as.character(genres))

movielens <- left_join(ratings, movies, by = "movieId")

# Validation set will be 10% of MovieLens data
set.seed(1, sample.kind="Rounding")
# if using R 3.5 or earlier, use `set.seed(1)` instead
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]

# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>% 
  semi_join(edx, by = "movieId") %>%
  semi_join(edx, by = "userId")

# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)

rm(dl, ratings, movies, test_index, temp, movielens, removed)

library(pbapply)
titles<-edx$title
years<-pbsapply(titles,function(x){
  str_extract(x,regex('\\(\\d{4}\\)'))%>%substr(2,5)
})

edx$movie_year<-as.numeric(years)

train_index <- createDataPartition(y = edx$rating, times = 1, p = 0.1, list = FALSE)
train <- edx[-train_index,]
test <- edx[train_index,]

library(lubridate)

train<-train%>%mutate(rating_year=as.numeric(year(as_datetime(timestamp))),years_since_watched=rating_year-movie_year)
train<-train%>%group_by(title)%>%mutate(movie_avg=mean(rating))
train<-train%>%mutate(overscore=rating-movie_avg)
train<-train%>%group_by(userId)%>%mutate(tendency_overscore=mean(overscore),user_rank=rank(tendency_overscore))
train<-train%>%group_by(movieId)%>%mutate(movie_rank=rank(movie_avg))

first_model<-train%>%lm(rating~years_since_watched+movie_rank+user_rank+movie_year+tendency_overscore,data=.)

test<-test%>%mutate(rating_year=as.numeric(year(as_datetime(timestamp))),years_since_watched=rating_year-movie_year)
test<-test%>%group_by(title)%>%mutate(movie_avg=mean(rating))
test<-test%>%mutate(overscore=rating-movie_avg)
test<-test%>%group_by(userId)%>%mutate(tendency_overscore=mean(overscore),user_rank=rank(tendency_overscore))
test<-test%>%group_by(movieId)%>%mutate(movie_rank=rank(movie_avg))

rating_hat<-predict(first_model,test)
library(doBy)
as.data.frame(test[which.maxn(test$rating-rating_hat,n=50),])
library(ggplot2)
test%>%ggplot(aes(x=years_since_watched,y=rating))+geom_point()

      